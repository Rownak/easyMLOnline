import { OnDestroy, OnInit, OnChanges, SimpleChange, ChangeDetectorRef } from '@angular/core';
import { NgxSpinnerService } from './ngx-spinner.service';
import { Subject } from 'rxjs';
import { Size, NgxSpinner } from './ngx-spinner.enum';
import * as ɵngcc0 from '@angular/core';
export declare class NgxSpinnerComponent implements OnDestroy, OnInit, OnChanges {
    private spinnerService;
    private changeDetector;
    /**
     * To set backdrop color
     * Only supports RGBA color format
     * @memberof NgxSpinnerComponent
     */
    bdColor: string;
    /**
     * To set spinner size
     *
     * @memberof NgxSpinnerComponent
     */
    size: Size;
    /**
     * To set spinner color(DEFAULTS.SPINNER_COLOR)
     *
     * @memberof NgxSpinnerComponent
     */
    color: string;
    /**
     * To set type of spinner
     *
     * @memberof NgxSpinnerComponent
     */
    type: string;
    /**
     * To toggle fullscreen mode
     *
     * @memberof NgxSpinnerComponent
     */
    fullScreen: boolean;
    /**
     * Spinner name
     *
     * @memberof NgxSpinnerComponent
     */
    name: string;
    /**
     * z-index value
     *
     * @memberof NgxSpinnerComponent
     */
    zIndex: number;
    /**
     * Custom template for spinner/loader
     *
     * @memberof NgxSpinnerComponent
     */
    template: string;
    /**
     * Show/Hide the spinner
     *
     * @type {boolean}
     * @memberof NgxSpinnerComponent
     */
    showSpinner: boolean;
    /**
     * To enable/disable animation
     *
     * @type {boolean}
     * @memberof NgxSpinnerComponent
     */
    disableAnimation: boolean;
    /**
     * Spinner Object
     *
     * @memberof NgxSpinnerComponent
     */
    spinner: NgxSpinner;
    /**
     * Array for spinner's div
     *
     * @memberof NgxSpinnerComponent
     */
    divArray: Array<number>;
    /**
     * Counter for div
     *
     * @memberof NgxSpinnerComponent
     *
     */
    divCount: number;
    /**
     * Show spinner
     *
     * @memberof NgxSpinnerComponent
    **/
    show: boolean;
    /**
     * Unsubscribe from spinner's observable
     *
     * @memberof NgxSpinnerComponent
    **/
    ngUnsubscribe: Subject<void>;
    /**
     * Element Reference
     *
     * @memberof NgxSpinnerComponent
     */
    spinnerDOM: any;
    handleKeyboardEvent(event: KeyboardEvent): void;
    /**
     * Creates an instance of NgxSpinnerComponent.
     *
     * @memberof NgxSpinnerComponent
     */
    constructor(spinnerService: NgxSpinnerService, changeDetector: ChangeDetectorRef);
    /**
     * Initialization method
     *
     * @memberof NgxSpinnerComponent
     */
    ngOnInit(): void;
    /**
     * To set default ngx-spinner options
     *
     * @memberof NgxSpinnerComponent
     */
    setDefaultOptions: () => void;
    /**
     * On changes event for input variables
     *
     * @memberof NgxSpinnerComponent
     */
    ngOnChanges(changes: {
        [propKey: string]: SimpleChange;
    }): void;
    /**
     * To get class for spinner
     *
     * @memberof NgxSpinnerComponent
     */
    getClass(type: string, size: Size): string;
    /**
     * Check if input variables have changed
     *
     * @memberof NgxSpinnerComponent
     */
    onInputChange(): void;
    /**
     * Component destroy event
     *
     * @memberof NgxSpinnerComponent
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxSpinnerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxSpinnerComponent, "ngx-spinner", never, { "disableAnimation": "disableAnimation"; "bdColor": "bdColor"; "zIndex": "zIndex"; "color": "color"; "type": "type"; "size": "size"; "fullScreen": "fullScreen"; "name": "name"; "template": "template"; "showSpinner": "showSpinner"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNwaW5uZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC1zcGlubmVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkRlc3Ryb3ksIE9uSW5pdCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2UsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3hTcGlubmVyU2VydmljZSB9IGZyb20gJy4vbmd4LXNwaW5uZXIuc2VydmljZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBTaXplLCBOZ3hTcGlubmVyIH0gZnJvbSAnLi9uZ3gtc3Bpbm5lci5lbnVtJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neFNwaW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIHNwaW5uZXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I7XG4gICAgLyoqXG4gICAgICogVG8gc2V0IGJhY2tkcm9wIGNvbG9yXG4gICAgICogT25seSBzdXBwb3J0cyBSR0JBIGNvbG9yIGZvcm1hdFxuICAgICAqIEBtZW1iZXJvZiBOZ3hTcGlubmVyQ29tcG9uZW50XG4gICAgICovXG4gICAgYmRDb2xvcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRvIHNldCBzcGlubmVyIHNpemVcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBOZ3hTcGlubmVyQ29tcG9uZW50XG4gICAgICovXG4gICAgc2l6ZTogU2l6ZTtcbiAgICAvKipcbiAgICAgKiBUbyBzZXQgc3Bpbm5lciBjb2xvcihERUZBVUxUUy5TUElOTkVSX0NPTE9SKVxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBjb2xvcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRvIHNldCB0eXBlIG9mIHNwaW5uZXJcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBOZ3hTcGlubmVyQ29tcG9uZW50XG4gICAgICovXG4gICAgdHlwZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRvIHRvZ2dsZSBmdWxsc2NyZWVuIG1vZGVcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBOZ3hTcGlubmVyQ29tcG9uZW50XG4gICAgICovXG4gICAgZnVsbFNjcmVlbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTcGlubmVyIG5hbWVcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBOZ3hTcGlubmVyQ29tcG9uZW50XG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIHotaW5kZXggdmFsdWVcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBOZ3hTcGlubmVyQ29tcG9uZW50XG4gICAgICovXG4gICAgekluZGV4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ3VzdG9tIHRlbXBsYXRlIGZvciBzcGlubmVyL2xvYWRlclxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcbiAgICAgKi9cbiAgICB0ZW1wbGF0ZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNob3cvSGlkZSB0aGUgc3Bpbm5lclxuICAgICAqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBzaG93U3Bpbm5lcjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUbyBlbmFibGUvZGlzYWJsZSBhbmltYXRpb25cbiAgICAgKlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBtZW1iZXJvZiBOZ3hTcGlubmVyQ29tcG9uZW50XG4gICAgICovXG4gICAgZGlzYWJsZUFuaW1hdGlvbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTcGlubmVyIE9iamVjdFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBzcGlubmVyOiBOZ3hTcGlubmVyO1xuICAgIC8qKlxuICAgICAqIEFycmF5IGZvciBzcGlubmVyJ3MgZGl2XG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lckNvbXBvbmVudFxuICAgICAqL1xuICAgIGRpdkFycmF5OiBBcnJheTxudW1iZXI+O1xuICAgIC8qKlxuICAgICAqIENvdW50ZXIgZm9yIGRpdlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcbiAgICAgKlxuICAgICAqL1xuICAgIGRpdkNvdW50OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU2hvdyBzcGlubmVyXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lckNvbXBvbmVudFxuICAgICoqL1xuICAgIHNob3c6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVW5zdWJzY3JpYmUgZnJvbSBzcGlubmVyJ3Mgb2JzZXJ2YWJsZVxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcbiAgICAqKi9cbiAgICBuZ1Vuc3Vic2NyaWJlOiBTdWJqZWN0PHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIEVsZW1lbnQgUmVmZXJlbmNlXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lckNvbXBvbmVudFxuICAgICAqL1xuICAgIHNwaW5uZXJET006IGFueTtcbiAgICBoYW5kbGVLZXlib2FyZEV2ZW50KGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIE5neFNwaW5uZXJDb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lckNvbXBvbmVudFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNwaW5uZXJTZXJ2aWNlOiBOZ3hTcGlubmVyU2VydmljZSwgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXphdGlvbiBtZXRob2RcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBOZ3hTcGlubmVyQ29tcG9uZW50XG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBUbyBzZXQgZGVmYXVsdCBuZ3gtc3Bpbm5lciBvcHRpb25zXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lckNvbXBvbmVudFxuICAgICAqL1xuICAgIHNldERlZmF1bHRPcHRpb25zOiAoKSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9uIGNoYW5nZXMgZXZlbnQgZm9yIGlucHV0IHZhcmlhYmxlc1xuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7XG4gICAgICAgIFtwcm9wS2V5OiBzdHJpbmddOiBTaW1wbGVDaGFuZ2U7XG4gICAgfSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVG8gZ2V0IGNsYXNzIGZvciBzcGlubmVyXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lckNvbXBvbmVudFxuICAgICAqL1xuICAgIGdldENsYXNzKHR5cGU6IHN0cmluZywgc2l6ZTogU2l6ZSk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBpbnB1dCB2YXJpYWJsZXMgaGF2ZSBjaGFuZ2VkXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTmd4U3Bpbm5lckNvbXBvbmVudFxuICAgICAqL1xuICAgIG9uSW5wdXRDaGFuZ2UoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDb21wb25lbnQgZGVzdHJveSBldmVudFxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE5neFNwaW5uZXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19